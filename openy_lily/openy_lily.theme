<?php

/**
 * @file
 * OpenY Lily Theme File.
 */

// @todo refactoring!!! We need to remove unused hooks and legacy dependencies.
use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Element\RenderElement;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\file\Entity\File;

/**
 * Implements hook_preprocess_template() for footer menus.
 */
function openy_lily_preprocess_menu__footer_menus(&$variables) {
  $variables['#cache']['contexts'][] = 'url.path';
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (in_array($variables['elements']['#plugin_id'], ['masthead_navigation_block'])) {
    $suggestions[] = 'block__mastheadnavigationblock';
  }
}

/**
 * Detects pages relative to location node.
 */
function openy_lily_detect_locations_pages() {
  if (Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    $node = Drupal::routeMatch()->getParameter('node');
  }
  if (Drupal::routeMatch()->getRouteName() == 'entity.node.preview') {
    $node = Drupal::routeMatch()->getParameter('node_preview');
  }
  if (isset($node)) {
    if ($site_section = Drupal::service('ymcali.page.context')->getContext()) {
      return ($site_section->bundle() == 'location' && $node->bundle() != 'location') ? $site_section : NULL;
    }
  }
  return;
}

/**
 * Detects pages relative to camp node.
 */
function openy_lily_detect_camp_pages() {
  if (Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    $node = Drupal::routeMatch()->getParameter('node');
  }

  if (Drupal::routeMatch()->getRouteName() == 'entity.node.preview') {
    $node = Drupal::routeMatch()->getParameter('node_preview');
  }

  if (isset($node)) {
    if ($site_section = Drupal::service('ymcali.page.context')->getContext()) {
      return ($site_section->bundle() == 'camp' && $node->bundle() != 'camp') ? $site_section : NULL;
    }
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $footer_menus = [
    'menu__footer_menu_left',
    'menu__footer_menu_center',
    'menu__footer_menu_right',
    'menu__footer',
  ];
  if (in_array($variables['theme_hook_original'], $footer_menus)) {
    $suggestions[] = 'menu__footer_menus';
  }
  if (in_array($variables['theme_hook_original'], ['menu__top_menu_2'])) {
    $suggestions[] = 'menu__top_menu';
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $route_name = Drupal::routeMatch()->getRouteName();

  switch ($route_name) {
    case 'system.403':
      array_push($suggestions, 'page__system__403');
      break;

    case 'system.404':
      array_push($suggestions, 'page__system__404');
      break;
  }

  $node = Drupal::routeMatch()->getParameter('node');
  if (!empty($node) || $node = Drupal::routeMatch()
    ->getParameter('node_preview')
  ) {
    if (is_object($node)) {
      array_unshift($suggestions, 'page__node__' . $node->bundle());
    }
    if (!Drupal::service('path.matcher')->isFrontPage()) {
      if ($route_name == 'entity.node.preview') {
        $front_page = Drupal::config('system.site')->get('page.front');
        if ('/node/' . $node->id() == $front_page) {
          array_push($suggestions, 'page__front');
        }
      }
    }
    // Detect all pages which referenced to locations by context.
    if ($data = openy_lily_detect_locations_pages()) {
      if ($node->bundle() != 'location') {
        array_push($suggestions, 'page__node__location_inner');
      }
      else {
        array_push($suggestions, 'page__node__location');
      }
    }
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  if (in_array('node__blog__default', $suggestions)) {
    array_push($suggestions, 'node__blog__full');
  }
  if (in_array('node__location__default', $suggestions)) {
    array_push($suggestions, 'node__location__full');
  }
  // Detect all pages which referenced to camp by context.
  if ($data = openy_lily_detect_camp_pages()) {
    switch ($variables['elements']['#node']->bundle()) {
      case 'blog':
        array_push($suggestions, 'node__blog__camp__full');
        break;
    }
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#name'])) {
    array_push($suggestions, 'form_element__' . $variables['element']['#name']);
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#name'])) {
    array_push($suggestions, 'form_element_label__' . $variables['element']['#name']);
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#name'])) {
    array_push($suggestions, 'input__' . $variables['element']['#name']);
  }
}

/**
 * Implements hook_preprocess_picture().
 */
function openy_lily_preprocess_picture(&$variables) {
  // Add responsiveness.
  $variables['attributes']['class'][] = 'img-responsive';
}

/**
 * Implements hook_preprocess_image().
 */
function openy_lily_preprocess_image(&$variables) {
  // Add responsiveness.
  $variables['attributes']['class'][] = 'img-responsive';
}

/**
 * Implements hook_preprocess_expander_block().
 */
function openy_lily_preprocess_expander_block(&$variables) {
  $id = 'collapse-' . $variables['entity']->bundle() . '-' . $variables['entity']->id();
  $variables['block_id'] = Html::getUniqueId($id);
}

/**
 * Implements hook_preprocess_node().
 */
function openy_lily_preprocess_node($variables) {
  $variables['date_formatted'] = Drupal::service('date.formatter')
    ->format($variables['node']->getCreatedTime(), 'blog_date_format');

  if (!in_array($variables['view_mode'], ['full', 'default'])) {
    return;
  }
  $variables['base_path'] = base_path();

  $variables['is_front'] = Drupal::service('path.matcher')->isFrontPage();
  if (!$variables['is_front']) {
    $front_page = Drupal::config('system.site')->get('page.front');
    $variables['is_front'] = '/node/' . $variables['node']->id() == $front_page;
  }

  // Location specific preprocessing.
  if ($variables['node']->bundle() == 'location' || $variables['node']->bundle() == 'camp') {
    // Add facebook ID to the template.
    if (!empty($variables['node']->field_facebook_page_id->value)) {
      $variables['fb_id'] = $variables['node']->field_facebook_page_id->value;
    }
  }

  // Blog specific preprocessing.
  if ($variables['node']->bundle() == 'blog') {

    $back_link_title = t('Back to Blog');
    $back_link_path = 'blog';
    $variables['back_link_title'] = $back_link_title;
    $variables['back_link_path'] = Url::fromUri('internal:/' . $back_link_path);
  }

  $variables['site_section_bundle'] = !empty($site_section) ? $site_section->bundle() : '';
}

/**
 * Implements hook_preprocess_html().
 */
function openy_lily_preprocess_html(&$variables) {
  $current_route_name = Drupal::service('current_route_match')->getRouteName();
  $classes = [];

  if ($current_route_name == 'entity.node.canonical') {
    $node = Drupal::routeMatch()->getParameter('node');
  }
  if ($current_route_name == 'entity.node.preview') {
    $node = Drupal::routeMatch()->getParameter('node_preview');
  }

  if (!$variables['is_front'] = Drupal::service('path.matcher')
    ->isFrontPage() && !empty($node)
  ) {
    if ($current_route_name == 'entity.node.preview') {
      $variables['is_front'] = '/node/' . $node->id() == Drupal::config('system.site')
        ->get('page.front');
    }
  }

  if ($variables['is_front']) {
    $classes = [
      'home-template',
      'page_home',
      'theme_ymca_2013_home',
    ];
  }
  elseif ($site_section = Drupal::service('ymcali.page.context')
    ->getContext()
  ) {
    $site_section_bundle = $site_section->bundle();
    switch ($site_section_bundle) {
      case 'location':
        // Location itself.
        if (isset($node) && $node->getType() == 'location') {
          $classes = [
            'locations-camps-template',
            'ancestor-locations',
            'page_post_detail',
            'node--type-location',
          ];
        }
        else {
          // Referenced nodes and other pages.
          $classes = [
            'landing-template',
            'ancestor-locations',
            'page_post_detail',
          ];
        }
        // Apply specific class based on value chosen in "Template" field.
        if (isset($node) && $node->hasField('field_template')) {
          if ($template = $node->field_template->value) {
            $classes[] = 'template_' . $template;
          }
        }
        break;
    }
  }
  if (!is_array($variables['attributes'])) {
    $variables['attributes']->addClass($classes);
  }
}

/**
 * Implements hook_preprocess_html().
 */
function openy_lily_preprocess_page(&$variables) {
  $header_search = theme_get_setting('header_search');
  if ($header_search !== NULL) {
    // Rely on config.
    $variables['header_search'] = $header_search;
  }
  else {
    // Display by default.
    $variables['header_search'] = TRUE;
  }
  if (Drupal::routeMatch()->getRouteName() == 'entity.node.preview') {
    $variables['node'] = Drupal::routeMatch()->getParameter('node_preview');
  }
  $route_name = 'view.site_search.search_results';
  $route_provider = \Drupal::service('router.route_provider');
  $routes = $route_provider->getRoutesByNames([$route_name]);
  if (!empty($routes)) {
    $variables['search_view_content_path'] = Url::fromRoute('view.site_search.search_results');
  }
  else {
    $variables['search_view_content_path'] = '';
    \Drupal::logger('ymca')
      ->error('Route "%route" does not exist.', ['%route' => $route_name]);
  }

  // Adds page title for login and register pages.
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  $variables['page_title'] = $title;

  $variables['site_name'] = \Drupal::config('system.site')->get('name');
  $variables['locations_path'] = theme_get_setting('locations_path');
}

/**
 * Implements hook_preprocess_pager().
 */
function openy_lily_preprocess_pager(&$vars) {
  if (empty($vars['items']['pages'])) {
    return;
  }
  foreach ($vars['items']['pages'] as &$item) {
    $item['attributes'] = new Attribute();
  }
}

/**
 * Implements hook_preprocess_node__blog__camp_blog_teaser().
 */
function openy_lily_preprocess_node__blog__camp_blog_teaser(&$vars) {
  if ($site_section = Drupal::service('ymcali.page.context')->getContext()) {
    $vars['page_title'] = $site_section->getTitle();
  }
}

/**
 * Prepares variables for input templates.
 *
 * Default template: input.html.twig.
 *
 * @param mixed $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #attributes.
 */
function openy_lily_preprocess_input(&$variables) {
  $element = $variables['element'];
  $variables['children'] = $element['#children'];

  if (isset($element['#skip_ymca_preprocess']) && $element['#skip_ymca_preprocess']) {
    return;
  }

  $types = ['url', 'textfield', 'tel', 'password', 'date'];
  if (in_array($element['#type'], $types)) {
    $classes = [
      'form-control',
      'text',
    ];
  }
  elseif ($element['#type'] == 'submit' && $element['#ajax_processed'] != TRUE) {
    $classes = [
      'form_submit',
      'btn',
      'btn-lg',
      'btn-primary',
    ];
  }
  elseif ($element['#type'] == 'email') {
    $classes = [
      'form-control',
      'text',
      'email',
    ];
  }

  if (isset($classes)) {
    $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $classes);
  }

}

/**
 * Prepares variables for textarea templates.
 *
 * Default template: textarea.html.twig.
 *
 * @param mixed $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #description, #rows, #cols,
 *     #placeholder, #required, #attributes, #resizable.
 */
function openy_lily_preprocess_textarea(&$variables) {
  $element = $variables['element'];
  Element::setAttributes($element, [
    'id',
    'name',
    'rows',
    'cols',
    'placeholder'
  ]);
  RenderElement::setAttributes($element, ['form-textarea']);
  $variables['wrapper_attributes'] = new Attribute();
  $variables['attributes'] = new Attribute($element['#attributes']);
  $variables['value'] = $element['#value'];
  $variables['resizable'] = !empty($element['#resizable']) ? $element['#resizable'] : NULL;
  $variables['required'] = !empty($element['#required']) ? $element['#required'] : NULL;
  $variables['attributes']['class'][] = 'form-control';
  $variables['attributes']['class'][] = 'text';
}

/**
 * Prepares variables for select element templates.
 *
 * Default template: select.html.twig.
 *
 * It is possible to group options together; to do this, change the format of
 * $options to an associative array in which the keys are group labels, and the
 * values are associative arrays in the normal $options format.
 *
 * @param mixed $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #options, #description, #extra,
 *     #multiple, #required, #name, #attributes, #size.
 */
function openy_lily_preprocess_select(&$variables) {
  $element = $variables['element'];
  Element::setAttributes($element, ['id', 'name', 'size']);
  RenderElement::setAttributes($element, ['form-select']);

  $variables['attributes'] = $element['#attributes'];
  $variables['options'] = form_select_options($element);
  $variables['attributes']['class'][] = 'form-control';
  $variables['attributes']['class'][] = 'text';

  // Sort location options.
  if (in_array('option_emails', $variables['element']['#parents'])) {
    $options = $variables['options'];
    // Remove empty option from array, due to sort reason.
    $empty_option = $options[0];
    unset($options[0]);
    // Sort options array by location's label.
    $sort = [];
    foreach ($options as $key => $row) {
      $sort[$key] = $row['label'];
    }
    array_multisort($sort, SORT_ASC, $options);
    // Pass back empty option on first position.
    array_unshift($options, $empty_option);
    // Finally pass back sorted options array.
    $variables['options'] = $options;
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function openy_lily_preprocess_form_element(&$variables) {
  $element = $variables['element'];
  if (!empty($element['#title_extra'])) {
    $variables['label']['#title_extra'] = $element['#title_extra'];
  }
  // Prepare address field.
  if (isset($element['#attributes']['class'][0]) && $element['#attributes']['class'][0] == 'address-line1') {
    $variables['label']['#title'] = t('Address 1');
  }
  if (isset($element['#attributes']['class'][0]) && $element['#attributes']['class'][0] == 'address-line2') {
    $variables['label']['#title_display'] = $variables['label_display'] = $variables['title_display'] = 'before';
    $variables['label']['#title'] = t('Address 2 <small>(optional) </small>');
  }
  if (isset($element['#attributes']['autocomplete']) && $element['#attributes']['autocomplete'] == 'address-level2') {
    $variables['label']['#title'] = t('City <small>(optional) </small>');
  }
  if (isset($element['#attributes']['autocomplete']) && $element['#attributes']['autocomplete'] == 'address-level1') {
    $variables['label']['#title'] = t('State <small>(optional) </small>');
    $element['#options'][''] = t('Select State or Province');
    $element['#empty_option'] = t('Select State or Province');
  }
  if (isset($element['#attributes']['checked']) && $element['#attributes']['checked'] == 'checked') {
    $variables['attributes']['class'] = 'checked';
  }
  if (isset($element['#name']) && in_array($element['#name'], [
      'mb_session_type',
      'mb_program',
      'mb_location'
    ])
  ) {
    $variables['title'] = $element['#title'];
    $variables['id'] = $element['#id'];
  }
  $variables['element'] = $element;
}

/**
 * Implements hook_preprocess_form_element_label().
 */
function openy_lily_preprocess_form_element_label(&$variables) {
  if (!empty($variables['element']['#title_extra'])) {
    $variables['title_extra']['#markup'] = $variables['element']['#title_extra'];
  }
}

/**
 * Prepares variables for form templates.
 *
 * Default template: form.html.twig.
 *
 * @param mixed $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #action, #method, #attributes, #children.
 */
function openy_lily_preprocess_form(&$variables) {
  $element = $variables['element'];
  if (isset($element['#action'])) {
    $element['#attributes']['action'] = UrlHelper::stripDangerousProtocols($element['#action']);
  }
  Element::setAttributes($element, ['method', 'id']);
  if (empty($element['#attributes']['accept-charset'])) {
    $element['#attributes']['accept-charset'] = "UTF-8";
  }
  $variables['attributes'] = $element['#attributes'];
  $variables['children'] = $element['#children'];

  if ($element['#form_id'] == 'user_login_form' || $element['#form_id'] == 'user_pass') {
    $variables['attributes']['class'][] = 'container';
  }
}

/**
 * Implements hook_theme().
 */
function openy_lily_theme() {
  return [
    'ymcali_groupex_form_full' => [
      'render element' => 'form',
    ],
    'ymcali_groupex_form_full_refine' => [
      'render element' => 'form',
      'template' => 'forms/groupex-form-full-refine',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_lily_form_groupex_form_full_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['location']['#pre_render'][] = 'openy_lily_prerender_checkboxes';
  $form['location']['#theme'] = 'checkboxes__location';
  $form['time_of_day']['#pre_render'][] = 'openy_lily_prerender_checkboxes_day';
  $form['time_of_day']['#theme'] = 'checkboxes__groupex';
  $form['filter_length']['#pre_render'][] = 'openy_lily_prerender_radios';
  $form['filter_length']['#theme'] = 'radios__groupex';
  $form['filter_date']['#pre_render'][] = 'openy_lily_prerender_datetime';
  $form['#theme'] = ['openy_lily_groupex_form_full'];
  $form['#attributes']['class'][] = 'group-ex';
  $form['#attributes']['class'][] = 'search';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_lily_form_groupex_form_full_refine_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['location']['#pre_render'][] = 'openy_lily_prerender_checkboxes';
  $form['location']['#theme'] = 'checkboxes__location__expanded';
  $form['time_of_day']['#pre_render'][] = 'openy_lily_prerender_checkboxes_day';
  $form['time_of_day']['#theme'] = 'checkboxes__groupex';
  $form['filter_length']['#pre_render'][] = 'openy_lily_prerender_radios';
  $form['filter_length']['#theme'] = 'radios__groupex';
  $form['filter_date']['#pre_render'][] = 'openy_lily_prerender_datetime';
  $form['#theme'] = ['openy_lily_groupex_form_full_refine'];
  $form['#attributes']['class'][] = 'group-ex';
  $form['#attributes']['class'][] = 'search';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_lily_form_groupex_form_location_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['time_of_day']['#pre_render'][] = 'openy_lily_prerender_checkboxes_day';
  $form['time_of_day']['#theme'] = 'checkboxes__groupex';
  $form['filter_length']['#pre_render'][] = 'openy_lily_prerender_radios';
  $form['filter_length']['#theme'] = 'radios__groupex';
  $form['filter_date']['#pre_render'][] = 'openy_lily_prerender_datetime';
  $form['#attributes']['class'][] = 'group-ex';
  $form['#attributes']['class'][] = 'search';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_lily_form_groupex_form_location_refine_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['location']['#pre_render'][] = 'openy_lily_prerender_checkboxes';
  $form['location']['#theme'] = 'checkboxes__location__expanded';
  $form['time_of_day']['#pre_render'][] = 'openy_lily_prerender_checkboxes_day';
  $form['time_of_day']['#theme'] = 'checkboxes__groupex';
  $form['filter_length']['#pre_render'][] = 'openy_lily_prerender_radios';
  $form['filter_length']['#theme'] = 'radios__groupex';
  $form['filter_date']['#pre_render'][] = 'openy_lily_prerender_datetime';
  $form['#theme'] = ['openy_lily_groupex_form_full_refine'];
  $form['#attributes']['class'][] = 'group-ex';
  $form['#attributes']['class'][] = 'search';
}

/**
 * Prerender callback from locations checkboxes.
 */
function openy_lily_prerender_checkboxes($element) {
  $children = Element::children($element);
  foreach ($children as $delta => $child_key) {
    $element[$child_key]['#theme'] = 'input__checkbox__location';
    $element[$child_key]['#theme_wrappers'] = [];
    $element[$child_key]['#title_display'] = 'hidden';
  }
  return $element;
}

/**
 * Prerender callback from locations checkboxes.
 */
function openy_lily_prerender_checkboxes_day($element) {
  $children = Element::children($element);
  foreach ($children as $delta => $child_key) {
    $element[$child_key]['#theme'] = 'input__checkbox__location_day';
    $element[$child_key]['#theme_wrappers'] = [];
    $element[$child_key]['#title_display'] = 'hidden';
  }
  return $element;
}

/**
 * Prerender callback from locations checkboxes.
 */
function openy_lily_prerender_radios($element) {
  $children = Element::children($element);
  foreach ($children as $delta => $child_key) {
    $element[$child_key]['#theme'] = 'input__radio__schedule';
    $element[$child_key]['#theme_wrappers'] = [];
    $element[$child_key]['#title_display'] = 'hidden';
  }
  return $element;
}

/**
 * Prerender callback from locations datetime.
 */
function openy_lily_prerender_datetime($element) {
  $children = Element::children($element);
  foreach ($children as $delta => $child_key) {
    $element[$child_key]['#type'] = 'textfield';
    $element[$child_key]['#process'] = [];
    $element[$child_key]['#pre_render'] = [];
    $element[$child_key]['#attributes']['type'] = 'text';
    $element[$child_key]['#attributes']['placeholder'] = 'mm/dd/yy';
    $element[$child_key]['#attributes']['class'] = ['form-control', 'text'];
    $element[$child_key]['#attributes']['autocomplete'] = 'off';
    $element[$child_key]['#attributes']['id'] = $element[$child_key]['#id'];
    $element[$child_key]['#attributes']['name'] = $element[$child_key]['#name'];
    $element[$child_key]['#attributes']['value'] = $element[$child_key]['#value'];
    unset($element[$child_key]['#attributes']['data-drupal-date-format']);
    unset($element[$child_key]['#attached']);
    $element[$child_key]['#theme'] = 'input__date__schedule';
    $element[$child_key]['#theme_wrappers'] = [];
    $element[$child_key]['#title_display'] = 'hidden';
  }
  $element['#theme_wrappers'] = ['datetime_wrapper__groupex'];
  return $element;
}

/**
 * Returns styles based on theme settings.
 *
 * @return string
 *   Imploded $styles[].
 */
function openy_lily_get_theme_styles() {
  $styles = [];

  // @todo Refactoring!!!!!
  if ($logo_path = theme_get_setting('logo.path')) {
    $styles[] = 'body .navbar-default .navbar-brand, body .footer-brand {background-image: url(' . file_create_url($logo_path) . ');}';
  }

  if ($logo_camps_fid = theme_get_setting('logo_camps')) {
    if (!empty($logo_camps_fid)) {
      $file = File::load($logo_camps_fid[0]);
      if ($file) {
        $uri = $file->getFileUri();
        $styles[] = 'body.ancestor-camps .navbar-default .navbar-brand, body.ancestor-camps .footer-brand {background-image: url(' . file_create_url($uri) . ');}';
      }
    }
  }

  if ($header_background_color_base = theme_get_setting('header_background_color_base')) {
    $styles[] = 'body .masthead {background: ' . $header_background_color_base . ';}';
  }

  if ($header_sub_background_color = theme_get_setting('header_sub_background_color')) {
    $styles[] = 'body .masthead-menu {background: ' . $header_sub_background_color . ' !important;}';
  }

  if ($site_section = Drupal::service('ymcali.page.context')->getContext()) {
    $site_section_bundle = $site_section->bundle();
    switch ($site_section_bundle) {
      case 'location':
        if ($header_background_color_locations = theme_get_setting('header_background_color_locations')) {
          $styles[] = 'body .location-masthead {background: ' . $header_background_color_locations . ' !important;}';
        }

        if ($header_sub_background_color_locations = theme_get_setting('header_sub_background_color_locations')) {
          $styles[] = 'body .location-details.masthead-menu {background: ' . $header_sub_background_color_locations . ' !important;}';
        }

        if ($header_buttons_color1_locations = theme_get_setting('header_buttons_color1_locations')) {
          $styles[] = 'body .masthead-button a {background-color: ' . $header_buttons_color1_locations . ';}';
        }

        if ($header_buttons_color2_locations = theme_get_setting('header_buttons_color2_locations')) {
          $styles[] = 'body .masthead-button a {';
          $styles[] = 'background-image: -webkit-linear-gradient(' . $header_buttons_color2_locations . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: -moz-linear-gradient(' . $header_buttons_color2_locations . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: -ms-linear-gradient(' . $header_buttons_color2_locations . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: linear-gradient(' . $header_buttons_color2_locations . ', rgba(0, 0, 0, 0));};';
        }
        break;

      case 'camp':
        if ($header_background_color_camps = theme_get_setting('header_background_color_camps')) {
          $styles[] = 'body.ancestor-camps .location-masthead {background: ' . $header_background_color_camps . ' !important;}';
        }

        if ($header_sub_background_color_camps = theme_get_setting('header_sub_background_color_camps')) {
          $styles[] = 'body .location-details.masthead-menu {background: ' . $header_sub_background_color_camps . ' !important;}';
        }

        if ($header_buttons_color1_camps = theme_get_setting('header_buttons_color1_camps')) {
          $styles[] = 'body.ancestor-camps .masthead .btn, body.ancestor-camps .btn-primary {background-color: ' . $header_buttons_color1_camps . ';}';
        }

        if ($header_buttons_color2_camps = theme_get_setting('header_buttons_color2_camps')) {
          $styles[] = 'body.ancestor-camps .masthead .btn, body.ancestor-camps .btn-primary {';
          $styles[] = 'background-image: -webkit-linear-gradient(' . $header_buttons_color2_camps . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: -moz-linear-gradient(' . $header_buttons_color2_camps . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: -ms-linear-gradient(' . $header_buttons_color2_camps . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: linear-gradient(' . $header_buttons_color2_camps . ', rgba(0, 0, 0, 0));}';
        }
        break;
    }
  }
  if ($links_color = theme_get_setting('links_color')) {
    $styles[] = 'body a {color: ' . $links_color . ';}';
  }

  if ($links_color_hover = theme_get_setting('links_color_hover')) {
    $styles[] = 'body a:hover {color: ' . $links_color_hover . ';}';
  }

  if ($camps_links_color = theme_get_setting('camps_links_color')) {
    $styles[] = '.ancestor-camps a {color: ' . $camps_links_color . ';}';
  }

  if ($camps_links_color_hover = theme_get_setting('camps_links_color_hover')) {
    $styles[] = '.ancestor-camps a:hover {color: ' . $camps_links_color_hover . ';}';
  }

  if ($header_home_button_bg_color = theme_get_setting('header_home_button_bg_color')) {
    $styles[] = 'body.page_home .masthead .btn-info {background-color: ' . $header_home_button_bg_color . ';}';
  }

  if ($header_home_button_border_color = theme_get_setting('header_home_button_border_color')) {
    $styles[] = 'body.page_home .masthead .btn-info {border-color: ' . $header_home_button_border_color . ';}';
  }

  if ($header_buttons_color1_base = theme_get_setting('header_buttons_color1_base')) {
    $styles[] = 'body .carousel-caption .btn, body .btn-primary {background-color: ' . $header_buttons_color1_base . ';}';
  }

  if ($header_buttons_color2_base = theme_get_setting('header_buttons_color2_base')) {
    $styles[] = 'body .carousel-caption .btn, body .btn-primary {';
    $styles[] = 'background-image: -webkit-linear-gradient(' . $header_buttons_color2_base . ', rgba(0, 0, 0, 0));';
    $styles[] = 'background-image: -moz-linear-gradient(' . $header_buttons_color2_base . ', rgba(0, 0, 0, 0));';
    $styles[] = 'background-image: -ms-linear-gradient(' . $header_buttons_color2_base . ', rgba(0, 0, 0, 0));';
    $styles[] = 'background-image: linear-gradient(' . $header_buttons_color2_base . ', rgba(0, 0, 0, 0));}';
  }

  return implode("\n", $styles);
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function openy_lily_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  // @todo remove and start using color schemas.
  // Styles.
  $form['openy_lily_settings']['styles'] = [
    '#type' => 'details',
    '#title' => t('Styles'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  ];

  // Links color.
  $form['openy_lily_settings']['styles']['links_color'] = [
    '#prefix' => '<div id="color-picker-container"></div>',
    '#type' => 'textfield',
    '#title' => t('Links color'),
    '#default_value' => theme_get_setting('links_color'),
    '#description' => t('Leave empty for basic styles.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Links color (mouseover).
  $form['openy_lily_settings']['styles']['links_color_hover'] = [
    '#type' => 'textfield',
    '#title' => t('Links color (mouseover)'),
    '#default_value' => theme_get_setting('links_color_hover'),
    '#description' => t('Leave empty for basic styles.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header background color.
  $form['openy_lily_settings']['styles']['header_background_color_base'] = [
    '#type' => 'textfield',
    '#title' => t('Header background color'),
    '#default_value' => theme_get_setting('header_background_color_base'),
    '#description' => t('Applies for entire headers on site except overridden.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header sub-background color.
  $form['openy_lily_settings']['styles']['header_sub_background_color'] = [
    '#type' => 'textfield',
    '#title' => t('Header sub-background color'),
    '#default_value' => theme_get_setting('header_sub_background_color'),
    '#description' => t('Applies for entire headers on site except overridden.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header background color for locations.
  $form['openy_lily_settings']['styles']['header_background_color_locations'] = [
    '#type' => 'textfield',
    '#title' => t('Header background color for locations'),
    '#default_value' => theme_get_setting('header_background_color_locations'),
    '#description' => t('Applies for locations headers.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header sub-background color for locations.
  $form['openy_lily_settings']['styles']['header_sub_background_color_locations'] = [
    '#type' => 'textfield',
    '#title' => t('Header sub-background color for locations'),
    '#default_value' => theme_get_setting('header_sub_background_color_locations'),
    '#description' => t('Applies for locations headers.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header background color for camps.
  $form['openy_lily_settings']['styles']['header_background_color_camps'] = [
    '#type' => 'textfield',
    '#title' => t('Header background color for camps'),
    '#default_value' => theme_get_setting('header_background_color_camps'),
    '#description' => t('Applies for camps headers.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header sub-background color for camps.
  $form['openy_lily_settings']['styles']['header_sub_background_color_camps'] = [
    '#type' => 'textfield',
    '#title' => t('Header sub-background color for camps'),
    '#default_value' => theme_get_setting('header_sub_background_color_camps'),
    '#description' => t('Applies for camps headers.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header button background color.
  $form['openy_lily_settings']['styles']['header_home_button_bg_color'] = [
    '#type' => 'textfield',
    '#title' => t('Header button background color'),
    '#default_value' => theme_get_setting('header_home_button_bg_color'),
    '#description' => t('Applies only for home page header button.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header button border color.
  $form['openy_lily_settings']['styles']['header_home_button_border_color'] = [
    '#type' => 'textfield',
    '#title' => t('Header button border color'),
    '#default_value' => theme_get_setting('header_home_button_border_color'),
    '#description' => t('Applies only for home page header button.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Basic buttons color.
  $form['openy_lily_settings']['styles']['header_buttons_color1_base'] = [
    '#type' => 'textfield',
    '#title' => t('Basic buttons color'),
    '#default_value' => theme_get_setting('header_buttons_color1_base'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Basic buttons color (optional).
  $form['openy_lily_settings']['styles']['header_buttons_color2_base'] = [
    '#type' => 'textfield',
    '#title' => t('Basic buttons color (optional)'),
    '#default_value' => theme_get_setting('header_buttons_color2_base'),
    '#description' => t('Add additional color for gradient support.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header locations buttons color.
  $form['openy_lily_settings']['styles']['header_buttons_color1_locations'] = [
    '#type' => 'textfield',
    '#title' => t('Header locations buttons color'),
    '#default_value' => theme_get_setting('header_buttons_color1_locations'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header locations buttons color (optional).
  $form['openy_lily_settings']['styles']['header_buttons_color2_locations'] = [
    '#type' => 'textfield',
    '#title' => t('Header locations buttons color (optional)'),
    '#default_value' => theme_get_setting('header_buttons_color2_locations'),
    '#description' => t('Add additional color for gradient support.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header camps buttons color.
  $form['openy_lily_settings']['styles']['header_buttons_color1_camps'] = [
    '#type' => 'textfield',
    '#title' => t('Header camps buttons color'),
    '#default_value' => theme_get_setting('header_buttons_color1_camps'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header camps buttons color (optional).
  $form['openy_lily_settings']['styles']['header_buttons_color2_camps'] = [
    '#type' => 'textfield',
    '#title' => t('Header camps buttons color (optional)'),
    '#default_value' => theme_get_setting('header_buttons_color2_camps'),
    '#description' => t('Add additional color for gradient support.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Camps links color.
  $form['openy_lily_settings']['styles']['camps_links_color'] = [
    '#type' => 'textfield',
    '#title' => t('Camps links color'),
    '#default_value' => theme_get_setting('camps_links_color'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Camps links color (mouseover).
  $form['openy_lily_settings']['styles']['camps_links_color_hover'] = [
    '#type' => 'textfield',
    '#title' => t('Camps links color (mouseover)'),
    '#default_value' => theme_get_setting('camps_links_color_hover'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Camps logo.
  $form['openy_lily_settings']['styles']['logo_camps'] = [
    '#type' => 'managed_file',
    '#title' => t('Camps logo'),
    '#default_value' => theme_get_setting('logo_camps'),
    '#upload_location' => 'public://',
  ];

  // Header search.
  $form['openy_lily_settings']['header_search'] = [
    '#type' => 'checkbox',
    '#title' => t('Header Location Search form'),
    '#default_value' => (theme_get_setting('header_search') === NULL) ? TRUE : theme_get_setting('header_search'),
    '#description' => t('Denote if you need it enabled sitewide.'),
  ];

  // Mobile sign button.
  $form['openy_lily_settings']['hide_mobile_sign_button'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide mobile sign in button'),
    '#default_value' => (theme_get_setting('hide_mobile_sign_button') === NULL) ? FALSE : theme_get_setting('hide_mobile_sign_button'),
    '#description' => t('Do not show mobile sign in button.'),
  ];

  // Location path.
  $form['openy_lily_settings']['locations_path'] = [
    '#type' => 'textfield',
    '#title' => t('Please input Locations page path'),
    '#default_value' => (theme_get_setting('locations_path') === NULL) ? FALSE : theme_get_setting('locations_path'),
    '#description' => t('Path to locations page.'),
  ];
}

/**
 * Implements THEME_proprocess_file_link().
 */
function openy_lily_preprocess_file_link(&$variables) {
  $file = $variables['file'];
  $options = [];

  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);
  $url = file_create_url($file_entity->getFileUri());
  $options['query'][$file->getChangedTime()] = '';

  $mime_type = $file->getMimeType();
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $file_entity->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $file_entity->getFilename();
  }

  $variables['link'] = Link::fromTextAndUrl($link_text, Url::fromUri($url, $options));
}

/**
 * Implements hook_preprocess_field().
 *
 * This is hardcoded in profile so we need this to be able to change the title.
 */
function openy_lily_preprocess_field__node__field_location_directions(array &$variables) {
  // Change link title to Directions.
  $variables['items'][0]['content']['#title'] = t('website:');
}
