<?php

/**
 * @file
 * OpenY Lily Theme File
 */

use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_template() for footer menus.
 */
function openy_lily_preprocess_menu__footer_menus(&$variables) {
  $variables['#cache']['contexts'][] = 'url.path';
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (in_array($variables['elements']['#plugin_id'], ['masthead_navigation_block'])) {
    $suggestions[] = 'block__mastheadnavigationblock';
  }
}

/**
 * Detects pages relative to camp node.
 */
function openy_lily_detect_camp_pages() {
  if (Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    $node = Drupal::routeMatch()->getParameter('node');
  }

  if (Drupal::routeMatch()->getRouteName() == 'entity.node.preview') {
    $node = Drupal::routeMatch()->getParameter('node_preview');
  }

  if (isset($node)) {
    if ($site_section = Drupal::service('page.context')->getContext()) {
      return ($site_section->bundle() == 'camp' && $node->bundle() != 'camp') ? $site_section : NULL;
    }
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $footer_menus = [
    'menu__footer_menu_left',
    'menu__footer_menu_center',
    'menu__footer_menu_right',
    'menu__footer',
  ];
  if (in_array($variables['theme_hook_original'], $footer_menus)) {
    $suggestions[] = 'menu__footer_menus';
  }
  if (in_array($variables['theme_hook_original'], ['menu__top_menu_2'])) {
    $suggestions[] = 'menu__top_menu';
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_lily_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  if (in_array('node__blog__default', $suggestions)) {
    array_push($suggestions, 'node__blog__full');
  }
//  if (in_array('node__article__default', $suggestions)) {
//    array_push($suggestions, 'node__article__full');
//  }
//  // Detect all pages which referenced to location by context.
//  if ($data = openy_lily_detect_locations_pages()) {
//    array_push($suggestions, 'node__article__location__full');
//  }
//  if (in_array('node__location__default', $suggestions)) {
//    array_push($suggestions, 'node__location__full');
//  }
//  if (in_array('node__camp__default', $suggestions)) {
//    array_push($suggestions, 'node__camp__full');
//  }
  // Detect all pages which referenced to camp by context.
  if ($data = openy_lily_detect_camp_pages()) {
    switch ($variables['elements']['#node']->bundle()) {
      case 'blog':
        array_push($suggestions, 'node__blog__camp__full');
        break;
//
//      case 'article':
//        array_push($suggestions, 'node__article__camp__full');
//        break;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function openy_lily_preprocess_node($variables) {
  $variables['date_formatted'] = Drupal::service('date.formatter')->format($variables['node']->getCreatedTime(), 'blog_date_format');

  if (!in_array($variables['view_mode'], array('full', 'default'))) {
    return;
  }
  $variables['base_path'] = base_path();

  $variables['is_front'] = Drupal::service('path.matcher')->isFrontPage();
  if (!$variables['is_front']) {
    $front_page = Drupal::config('system.site')->get('page.front');
    $variables['is_front'] = '/node/' . $variables['node']->id() == $front_page;
  }

  // Blog specific preprocessing.
  if ($variables['node']->bundle() == 'blog') {

    $back_link_title = t('Back to Blog');
    $back_link_path = 'blog';
// TODO what has replace field_tags
//    if ($field_tags_value = $variables['node']->field_tags->getValue()) {
// TODO Fix TERM_TID_NEWS. No way to know what TERM_TID_NEWS will point to.
//      foreach ($field_tags_value as $id) {
//        if ($id['target_id'] == TERM_TID_NEWS) {
//          $back_link_title = t('Back to News');
//          $back_link_path = 'news';
//        }
//      }
//    }
    $variables['back_link_title'] = $back_link_title;
    $variables['back_link_path'] = Url::fromUri('internal:/' . $back_link_path);
  }

  $variables['site_section_bundle'] = !empty($site_section) ? $site_section->bundle() : '';
}


/**
 * Implements hook_preprocess_html().
 */
function openy_lily_preprocess_html(&$variables) {
  $current_route_name = Drupal::service('current_route_match')->getRouteName();

  if ($current_route_name == 'entity.node.canonical') {
    $node = Drupal::routeMatch()->getParameter('node');
  }
  if ($current_route_name == 'entity.node.preview') {
    $node = Drupal::routeMatch()->getParameter('node_preview');
  }

  if (!$variables['is_front'] = Drupal::service('path.matcher')->isFrontPage() && !empty($node)) {
    if (Drupal::service('current_route_match')->getRouteName() == 'entity.node.preview') {
      $variables['is_front'] = '/node/' . $node->id() == Drupal::config('system.site')->get('page.front');
    }
  }

  // Set front page title.
  if ($variables['is_front']) {
    $variables['front_page_title'] = Drupal::config('system.site')->get('name');
  }

  if ($variables['is_front']) {
    $classes = [
      'home-template',
      'page_home',
      'theme_ymca_2013_home',
    ];
  }

  if (!is_array($variables['attributes'])) {
    $variables['attributes']->addClass($classes);
  }

  $favicon_default = theme_get_setting('openy_lily_favicon_default');
  $iconFid = reset($favicon_default);

  if ($iconFid) {
    $file = FILE::load($iconFid);
    $variables['page']['#attached']['html_head_link'][][] = [
      'rel' => 'shortcut icon',
      'href' => file_create_url($file->getFileUri()),
      'type' => $file->getMimeType(),
    ];
  }
}

/**
 * Implements hook_preprocess_html().
 */
function openy_lily_preprocess_page(&$variables) {
  $header_search = theme_get_setting('header_search');
  if ($header_search !== NULL) {
    // Rely on config.
    $variables['header_search'] = $header_search;
  }
  else {
    // Display by default.
    $variables['header_search'] = TRUE;
  }
  if (Drupal::routeMatch()->getRouteName() == 'entity.node.preview') {
    $variables['node'] = Drupal::routeMatch()->getParameter('node_preview');
  }
}

/**
 * Implements hook_preprocess_node__blog__camp_blog_teaser().
 */
function openy_lily_preprocess_node__blog__camp_blog_teaser(&$vars) {
  if ($site_section = Drupal::service('page.context')->getContext()) {
    $vars['page_title'] = $site_section->getTitle();
  }
}

/**
 * Returns styles based on theme settings.
 *
 * @return string
 *   Imploded $styles[].
 */
function openy_lily_get_theme_styles() {
  $styles = [];

  if ($logo_path = theme_get_setting('logo.path')) {
    $styles[] = 'body .navbar-default .navbar-brand, body .footer-brand {background-image: url(' . file_create_url($logo_path) . ');}';
  }

  if ($logo_camps_fid = theme_get_setting('logo_camps')) {
    if (!empty($logo_camps_fid)) {
      $file = File::load($logo_camps_fid[0]);
      if ($file) {
        $uri = $file->getFileUri();
        $styles[] = 'body.ancestor-camps .navbar-default .navbar-brand, body.ancestor-camps .footer-brand {background-image: url(' . file_create_url($uri) . ');}';
      }
    }
  }

  if ($header_background_color_base = theme_get_setting('header_background_color_base')) {
    $styles[] = 'body .masthead {background: ' . $header_background_color_base . ';}';
  }

  if ($header_sub_background_color = theme_get_setting('header_sub_background_color')) {
    $styles[] = 'body .masthead-menu {background: ' . $header_sub_background_color . ' !important;}';
  }

  if ($site_section = Drupal::service('page.context')->getContext()) {
    $site_section_bundle = $site_section->bundle();
    switch ($site_section_bundle) {
      case 'location':
        if ($header_background_color_locations = theme_get_setting('header_background_color_locations')) {
          $styles[] = 'body .location-masthead {background: ' . $header_background_color_locations . ' !important;}';
        }

        if ($header_sub_background_color_locations = theme_get_setting('header_sub_background_color_locations')) {
          $styles[] = 'body .location-details.masthead-menu {background: ' . $header_sub_background_color_locations . ' !important;}';
        }

        if ($header_buttons_color1_locations = theme_get_setting('header_buttons_color1_locations')) {
          $styles[] = 'body .masthead-button a {background-color: ' . $header_buttons_color1_locations . ';}';
        }

        if ($header_buttons_color2_locations = theme_get_setting('header_buttons_color2_locations')) {
          $styles[] = 'body .masthead-button a {';
          $styles[] = 'background-image: -webkit-linear-gradient(' . $header_buttons_color2_locations . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: -moz-linear-gradient(' . $header_buttons_color2_locations . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: -ms-linear-gradient(' . $header_buttons_color2_locations . ', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: linear-gradient(' . $header_buttons_color2_locations . ', rgba(0, 0, 0, 0));};';
        }
        break;
      case 'camp':
        if ($header_background_color_camps = theme_get_setting('header_background_color_camps')) {
          $styles[] = 'body.ancestor-camps .location-masthead {background: ' . $header_background_color_camps . ' !important;}';
        }

        if ($header_sub_background_color_camps = theme_get_setting('header_sub_background_color_camps')) {
          $styles[] = 'body .location-details.masthead-menu {background: ' . $header_sub_background_color_camps . ' !important;}';
        }

        if ($header_buttons_color1_camps = theme_get_setting('header_buttons_color1_camps')) {
          $styles[] = 'body.ancestor-camps .masthead .btn, body.ancestor-camps .btn-primary {background-color: ' . $header_buttons_color1_camps . ';}';
        }

        if ($header_buttons_color2_camps = theme_get_setting('header_buttons_color2_camps')) {
          $styles[] = 'body.ancestor-camps .masthead .btn, body.ancestor-camps .btn-primary {';
          $styles[] = 'background-image: -webkit-linear-gradient(' . $header_buttons_color2_camps .', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: -moz-linear-gradient(' . $header_buttons_color2_camps .', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: -ms-linear-gradient(' . $header_buttons_color2_camps .', rgba(0, 0, 0, 0));';
          $styles[] = 'background-image: linear-gradient(' . $header_buttons_color2_camps .', rgba(0, 0, 0, 0));}';
        }
        break;
    }
  }
  if ($links_color = theme_get_setting('links_color')) {
    $styles[] = 'body a {color: ' . $links_color . ';}';
  }

  if ($links_color_hover = theme_get_setting('links_color_hover')) {
    $styles[] = 'body a:hover {color: ' . $links_color_hover . ';}';
  }

  if ($camps_links_color = theme_get_setting('camps_links_color')) {
    $styles[] = '.ancestor-camps a {color: ' . $camps_links_color . ';}';
  }

  if ($camps_links_color_hover = theme_get_setting('camps_links_color_hover')) {
    $styles[] = '.ancestor-camps a:hover {color: ' . $camps_links_color_hover . ';}';
  }

  if ($header_home_button_bg_color = theme_get_setting('header_home_button_bg_color')) {
    $styles[] = 'body.page_home .masthead .btn-info {background-color: ' . $header_home_button_bg_color . ';}';
  }

  if ($header_home_button_border_color = theme_get_setting('header_home_button_border_color')) {
    $styles[] = 'body.page_home .masthead .btn-info {border-color: ' . $header_home_button_border_color . ';}';
  }

  if ($header_buttons_color1_base = theme_get_setting('header_buttons_color1_base')) {
    $styles[] = 'body .carousel-caption .btn, body .btn-primary {background-color: ' . $header_buttons_color1_base . ';}';
  }

  if ($header_buttons_color2_base = theme_get_setting('header_buttons_color2_base')) {
    $styles[] = 'body .carousel-caption .btn, body .btn-primary {';
    $styles[] = 'background-image: -webkit-linear-gradient(' . $header_buttons_color2_base .', rgba(0, 0, 0, 0));';
    $styles[] = 'background-image: -moz-linear-gradient(' . $header_buttons_color2_base .', rgba(0, 0, 0, 0));';
    $styles[] = 'background-image: -ms-linear-gradient(' . $header_buttons_color2_base .', rgba(0, 0, 0, 0));';
    $styles[] = 'background-image: linear-gradient(' . $header_buttons_color2_base .', rgba(0, 0, 0, 0));}';
  }

  return implode("\n", $styles);
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function openy_lily_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'openy_lily/admin-side';
  hide($form['theme_settings']['toggle_favicon']);
  hide($form['favicon']);

  // Styles.
  $form['openy_lily_settings']['styles'] = [
    '#type' => 'details',
    '#title' => t('Styles'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  ];

  // Links color.
  $form['openy_lily_settings']['styles']['links_color'] = [
    '#prefix' => '<div id="color-picker-container"></div>',
    '#type' => 'textfield',
    '#title' => t('Links color'),
    '#default_value' => theme_get_setting('links_color'),
    '#description' => t('Leave empty for basic styles.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Links color (mouseover).
  $form['openy_lily_settings']['styles']['links_color_hover'] = [
    '#type' => 'textfield',
    '#title' => t('Links color (mouseover)'),
    '#default_value' => theme_get_setting('links_color_hover'),
    '#description' => t('Leave empty for basic styles.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header background color.
  $form['openy_lily_settings']['styles']['header_background_color_base'] = [
    '#type' => 'textfield',
    '#title' => t('Header background color'),
    '#default_value' => theme_get_setting('header_background_color_base'),
    '#description' => t('Applies for entire headers on site except overridden.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header sub-background color.
  $form['openy_lily_settings']['styles']['header_sub_background_color'] = [
    '#type' => 'textfield',
    '#title' => t('Header sub-background color'),
    '#default_value' => theme_get_setting('header_sub_background_color'),
    '#description' => t('Applies for entire headers on site except overridden.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header background color for locations.
  $form['openy_lily_settings']['styles']['header_background_color_locations'] = [
    '#type' => 'textfield',
    '#title' => t('Header background color for locations'),
    '#default_value' => theme_get_setting('header_background_color_locations'),
    '#description' => t('Applies for locations headers.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header sub-background color for locations.
  $form['openy_lily_settings']['styles']['header_sub_background_color_locations'] = [
    '#type' => 'textfield',
    '#title' => t('Header sub-background color for locations'),
    '#default_value' => theme_get_setting('header_sub_background_color_locations'),
    '#description' => t('Applies for locations headers.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header background color for camps.
  $form['openy_lily_settings']['styles']['header_background_color_camps'] = [
    '#type' => 'textfield',
    '#title' => t('Header background color for camps'),
    '#default_value' => theme_get_setting('header_background_color_camps'),
    '#description' => t('Applies for camps headers.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header sub-background color for camps.
  $form['openy_lily_settings']['styles']['header_sub_background_color_camps'] = [
    '#type' => 'textfield',
    '#title' => t('Header sub-background color for camps'),
    '#default_value' => theme_get_setting('header_sub_background_color_camps'),
    '#description' => t('Applies for camps headers.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header button background color.
  $form['openy_lily_settings']['styles']['header_home_button_bg_color'] = [
    '#type' => 'textfield',
    '#title' => t('Header button background color'),
    '#default_value' => theme_get_setting('header_home_button_bg_color'),
    '#description' => t('Applies only for home page header button.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header button border color.
  $form['openy_lily_settings']['styles']['header_home_button_border_color'] = [
    '#type' => 'textfield',
    '#title' => t('Header button border color'),
    '#default_value' => theme_get_setting('header_home_button_border_color'),
    '#description' => t('Applies only for home page header button.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Basic buttons color.
  $form['openy_lily_settings']['styles']['header_buttons_color1_base'] = [
    '#type' => 'textfield',
    '#title' => t('Basic buttons color'),
    '#default_value' => theme_get_setting('header_buttons_color1_base'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Basic buttons color (optional).
  $form['openy_lily_settings']['styles']['header_buttons_color2_base'] = [
    '#type' => 'textfield',
    '#title' => t('Basic buttons color (optional)'),
    '#default_value' => theme_get_setting('header_buttons_color2_base'),
    '#description' => t('Add additional color for gradient support.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header locations buttons color.
  $form['openy_lily_settings']['styles']['header_buttons_color1_locations'] = [
    '#type' => 'textfield',
    '#title' => t('Header locations buttons color'),
    '#default_value' => theme_get_setting('header_buttons_color1_locations'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header locations buttons color (optional).
  $form['openy_lily_settings']['styles']['header_buttons_color2_locations'] = [
    '#type' => 'textfield',
    '#title' => t('Header locations buttons color (optional)'),
    '#default_value' => theme_get_setting('header_buttons_color2_locations'),
    '#description' => t('Add additional color for gradient support.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header camps buttons color.
  $form['openy_lily_settings']['styles']['header_buttons_color1_camps'] = [
    '#type' => 'textfield',
    '#title' => t('Header camps buttons color'),
    '#default_value' => theme_get_setting('header_buttons_color1_camps'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Header camps buttons color (optional).
  $form['openy_lily_settings']['styles']['header_buttons_color2_camps'] = [
    '#type' => 'textfield',
    '#title' => t('Header camps buttons color (optional)'),
    '#default_value' => theme_get_setting('header_buttons_color2_camps'),
    '#description' => t('Add additional color for gradient support.'),
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Camps links color.
  $form['openy_lily_settings']['styles']['camps_links_color'] = [
    '#type' => 'textfield',
    '#title' => t('Camps links color'),
    '#default_value' => theme_get_setting('camps_links_color'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Camps links color (mouseover).
  $form['openy_lily_settings']['styles']['camps_links_color_hover'] = [
    '#type' => 'textfield',
    '#title' => t('Camps links color (mouseover)'),
    '#default_value' => theme_get_setting('camps_links_color_hover'),
    '#description' => '',
    '#attributes' => ['class' => ['color-preview']],
  ];

  // Camps logo.
  $form['openy_lily_settings']['styles']['logo_camps'] = [
    '#type' => 'managed_file',
    '#title' => t('Camps logo'),
    '#default_value' => theme_get_setting('logo_camps'),
    '#upload_location' => 'public://',
  ];

  // Favicons.
  $form['openy_lily_settings']['favicon'] = [
    '#type' => 'details',
    '#title' => t('Favicons'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  ];

  // Default favicon.
  $form['openy_lily_settings']['favicon']['openy_lily_favicon_default'] = [
    '#type' => 'managed_file',
    '#title' => t('Default favicon'),
    '#default_value' => theme_get_setting('openy_lily_favicon_default'),
    '#upload_location' => 'public://favicon/',
    '#upload_validators'  => [
      'file_validate_extensions' => ['ico png']
    ]
  ];

  // Camp favicon.
  $form['openy_lily_settings']['favicon']['openy_lily_favicon_camp'] = [
    '#type' => 'managed_file',
    '#title' => t('Camp favicon'),
    '#default_value' => theme_get_setting('openy_lily_favicon_camp'),
    '#upload_location' => 'public://favicon/',
    '#upload_validators'  => [
      'file_validate_extensions' => ['ico png']
    ]
  ];

  // Location favicon.
  $form['openy_lily_settings']['favicon']['openy_lily_favicon_location'] = [
    '#type' => 'managed_file',
    '#title' => t('Location favicon'),
    '#default_value' => theme_get_setting('openy_lily_favicon_location'),
    '#upload_location' => 'public://favicon/',
    '#upload_validators'  => [
      'file_validate_extensions' => ['ico png']
    ]
  ];

  // Header search.
  $form['openy_lily_settings']['header_search'] = [
    '#type' => 'checkbox',
    '#title' => t('Header Location Search form'),
    '#default_value' => (theme_get_setting('header_search') === NULL) ? TRUE : theme_get_setting('header_search'),
    '#description' => t('Denote if you need it enabled sitewide.'),
  ];

  // Mobile sign button.
  $form['openy_lily_settings']['hide_mobile_sign_button'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide mobile sign in button'),
    '#default_value' => (theme_get_setting('hide_mobile_sign_button') === NULL) ? FALSE : theme_get_setting('hide_mobile_sign_button'),
    '#description' => t('Do not show mobile sign in button.'),
  ];
}
