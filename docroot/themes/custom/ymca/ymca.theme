<?php

/**
 * @file
 * Theme file.
 */

define('SITE_SECTION_TARGET_TYPE', 'node');

use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;


/**
 * Implements hook_preprocess_block() for block content.
 */
function ymca_preprocess_block(&$variables) {
  $footer_menu_blocks = ['footer-menu-left', 'footer-menu-center', 'footer-menu-right'];
  if (in_array($variables['derivative_plugin_id'], $footer_menu_blocks)) {
    $variables['attributes']['class'][] = 'col-xs-6 col-sm-4';
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function ymca_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $footer_menus = ['menu__footer_menu_left', 'menu__footer_menu_center', 'menu__footer_menu_right'];
  if (in_array($variables['theme_hook_original'], $footer_menus)) {
    $suggestions[] = 'menu__footer_menus';
  }
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function ymca_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    array_unshift($suggestions, 'page__node__' . $node->bundle());
  }
  if (!\Drupal::service('path.matcher')->isFrontPage()) {
    if (\Drupal::service('current_route_match')->getRouteName() == 'entity.node.preview') {
      $node = \Drupal::routeMatch()->getParameter('node_preview');
      $front_page = \Drupal::config('system.site')->get('page.front');
      if ($node->url() == $front_page) {
        array_unshift($suggestions, 'page__front');
      }
    }
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function ymca_preprocess_breadcrumb(&$variables) {
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']) {
    // Special case for blog posts.
    if ($node->getType() == 'blog') {
      $variables['breadcrumb'] = [
        new \Drupal\Core\Link('Home', Drupal\Core\Url::fromUri('internal:/')),
        // TODO: replace with a link to /blog page.
        new \Drupal\Core\Link('Blog', Drupal\Core\Url::fromUri($GLOBALS['base_url'] . '/blog', ['external' => TRUE])),
      ];
    }
    $variables['breadcrumb'][] = array(
      'text' => $node->getTitle()
    );
  }
}

/**
 * Implements hook_preprocess_picture().
 */
function ymca_preprocess_picture(&$variables) {
  // Add responsiveness.
  $variables['attributes']['class'][] = 'img-responsive';
}

/**
 * Implements hook_preprocess_image().
 */
function ymca_preprocess_image(&$variables) {
  // Add responsiveness.
  $variables['attributes']['class'][] = 'img-responsive';
}

/**
 * Implements hook_preprocess_expander_block().
 */
function ymca_preprocess_expander_block(&$variables) {
  $id = 'collapse-' . $variables['entity']->bundle() . '-' . $variables['entity']->id();
  $variables['block_id'] = \Drupal\Component\Utility\Html::getUniqueId($id);
}

/**
 * Implements hook_preprocess_node().
 */
function ymca_preprocess_node(&$variables) {
  if (!in_array($variables['view_mode'], array('full', 'default'))) {
    return;
  }

  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  if (!$variables['is_front']) {
    $front_page = \Drupal::config('system.site')->get('page.front');
    $variables['is_front'] = $variables['node']->url() == $front_page;
  }

  // Handle alerts.
  if ($variables['node']->hasField('field_alert')) {
    if ($values = $variables['node']->field_alert->getValue()) {
      if (!empty($values[0]['target_id'])) {
        $id = $values[0]['target_id'];
        $block = \Drupal::entityTypeManager()->getStorage('block_content')->load($id);
        \Drupal::service('alerts.service')->setCurrentAlertBlock($block);
      }
    }
  }

  if ($variables['node']->hasField('field_site_section')) {
    if ($value = $variables['node']->field_site_section->getValue()) {
      if ($id = $value[0]['target_id']) {
        $site_section = \Drupal::entityTypeManager()->getStorage('node')->load($id);
        \Drupal::service('pagecontext.service')->setContext($site_section);
      }
    }
  }
  elseif (in_array($variables['node']->bundle(), array('location', 'camp'))) {
    \Drupal::service('pagecontext.service')->setContext($variables['node']);
  }

  if ($variables['node']->bundle() == 'article') {
    $variables['header_image_url'] = '';
    if ($header_image = $variables['node']->field_header_image->getValue()) {
      $id = $header_image[0]['target_id'];
      $file = \Drupal::entityTypeManager()->getStorage('file')->load($id);
      $original_path = $file->getFileUri();
      // Load style.
      $style = \Drupal::entityTypeManager()->getStorage('image_style')->load('2013_masthead');
      // Set up derivative file information.
      $thumbnail = $style->buildUri($original_path);
      // Create derivative if necessary.
      if (!file_exists($thumbnail)) {
        $style->createDerivative($original_path, $thumbnail);
      }
      $variables['header_image_url'] = file_create_url($thumbnail);
    }
  }

  if ($variables['node']->bundle() == 'location') {
    if ($variables['node']->field_include_general_blog_posts->value) {
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'blog')
        ->condition('field_site_section.target_id', $variables['node']->id())
        ->condition('status', 1);
      $nids = $query->execute();

      if (empty($nids) || count($nids) == 1) {
        $query = \Drupal::entityQuery('node')
          ->condition('type', 'blog')
          ->condition('status', 1);
        $new_nids = $query->execute();
        if (empty($nids)) {
          $nids = array_slice($new_nids, 0, 2);
        }
        if (count($nids) == 1) {
          $nids[] = array_shift($new_nids);
        }
      }
      $nodes = entity_load_multiple('node', $nids);
      foreach ($nodes as $nid => $node) {
        $items[] = array(
          'title' => new \Drupal\Core\Link($node->getTitle(), Drupal\Core\Url::fromUri('internal:/node/' . $nid)),
          'text' =>  Unicode::truncate($node->field_summary->value, 180, TRUE, FALSE),
          'read_more_url' => Drupal\Core\Url::fromUri('internal:/node/' . $nid),
        );
      }
      $variables['news_events'] = $items;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function ymca_preprocess_html(&$variables) {
  // Default classes.
  $classes = ['internal-template', 'theme_ymca_2013_internal_category_and_detail'];
  if (empty($variables['attributes'])) {
    $variables['attributes'] = new \Drupal\Core\Template\Attribute();
  }

  if (!$variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage()) {
    if (\Drupal::service('current_route_match')->getRouteName() == 'entity.node.preview') {
      $node = \Drupal::request()->attributes->get('node_preview');
      $variables['is_front'] = $node->url() == \Drupal::config('system.site')->get('page.front');
    }
  }

  if ($variables['is_front']) {
    $classes = [
      'home-template',
      'page_home',
      'theme_ymca_2013_home',
    ];
  }
  elseif ($site_section = \Drupal::service('pagecontext.service')->getContext()) {
    $site_section_bundle = $site_section->bundle();
    switch ($site_section_bundle) {
      case 'camp':
        $classes = [
          'internal-template',
          'ancestor-camps',
          'page_post_detail',
          'theme_ymca_2013_camp_category_and_detail',
        ];
        break;

      case 'location':
        $classes = [
          'locations-camps-template',
          'ancestor-locations',
          'page_post_detail',
          'theme_ymca_2013_location_home',
        ];
        if (\Drupal::service('current_route_match')->getRouteName() == 'ymca_frontend.location_schedules') {
          $classes = [
            'schedules-template',
            'ancestor-locations',
            'page_schedules',
            'theme_ymca_2013_location_home',
          ];
        }
        break;
    }
  }

  $variables['attributes']->addClass($classes);
}

/**
 * Implements hook_preprocess_html().
 */
function ymca_preprocess_page(&$variables) {
  // Alerts on the page.
  if ($block = \Drupal::service('alerts.service')->getCurrentAlertBlock()) {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
    $variables['page']['messages'] = $view_builder->view($block);
  }

  /** @var \Drupal\node\Entity\Node $site_section */
  if ($site_section = \Drupal::service('pagecontext.service')->getContext()) {
    $site_section_bundle = $site_section->bundle();
    $variables['site_section'] = $site_section;
    $variables['working_hours'] = '';
    if ($site_section_bundle == 'location') {
      /* @var \Drupal\Core\Field\FieldItemListInterface $items */
      $items = $site_section->field_working_hours->getValue()[0]['target_id'];
      $block = \Drupal::entityTypeManager()->getStorage('block_content')->load($items);
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
      $variables['working_hours'] = $view_builder->view($block);
    }
    $variables['site_section_bundle'] = $site_section_bundle;
  }
}

/**
 * Implements hook_preprocess_pager().
 */
function ymca_preprocess_pager(&$vars) {
  foreach ($vars['items']['pages'] as &$item) {
    $item['attributes'] = new \Drupal\Core\Template\Attribute();
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function ymca_preprocess_views_view(&$vars) {
  if ($vars['view']->id() == 'ymca_twin_cities_blog' && $vars['view']->current_display == 'blog_page') {
    $vars['base_path'] = base_path();
    $vars['categories'] = [];
    foreach ($vars['view']->filter['field_tags_target_id']->options['value'] as $id) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($id);
      $link = new \Drupal\Core\Link($term->label(), Drupal\Core\Url::fromUri('internal:/taxonomy/term/' . $id));
      $vars['categories'][] = $link;
      // Pass Archive block data to the Search The Blog block.
      if ($archive_lists = ymca_get_archive_data('blog')) {
        $vars['archive_lists'] = $archive_lists;
      }
    }
  }

  if ($vars['view']->id() == 'ymca_news' && $vars['view']->current_display == 'page_news') {
    $vars['base_path'] = base_path();
    // Pass Archive block data to the YMCA News Archive block.
    if ($archive_lists = ymca_get_archive_data('news')) {
      $vars['archive_lists'] = $archive_lists;
    }
  }

  if ($vars['view']->id() == 'taxonomy_term' && $vars['view']->current_display == 'page_1') {
    $vars['base_path'] = base_path();
    $tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('tags');
    foreach ($tree as $term_object) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_object->tid);
      if ($term->name == 'News') {
        continue;
      }
      $link = new \Drupal\Core\Link($term->label(), Drupal\Core\Url::fromUri('internal:/taxonomy/term/' . $term_object->tid));
      $vars['categories'][] = $link;
    }
    // Pass Archive block data to the Search The Blog block.
    if ($archive_lists = ymca_get_archive_data('blog')) {
      $vars['archive_lists'] = $archive_lists;
    }
  }
}

/**
 * Implements template_preprocess_item_list().
 */
function ymca_preprocess_item_list(&$vars) {
  // Detect blog search form by path, because we haven't some other id.
  $current_path = \Drupal::service('path.current')->getPath();
  if ($current_path == '/search/blog') {
    $vars['base_path'] = base_path();
    $vars['search_blog'] = TRUE;
    $tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('tags');
    foreach ($tree as $term_object) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_object->tid);
      if ($term->name == 'News') {
        continue;
      }
      $link = new \Drupal\Core\Link($term->label(), Drupal\Core\Url::fromUri('internal:/taxonomy/term/' . $term_object->tid));
      $vars['categories'][] = $link;
    }
    // Pass Archive block data to the Search The Blog block.
    if ($archive_lists = ymca_get_archive_data('blog')) {
      $vars['archive_lists'] = $archive_lists;
    }
  }
}

/**
 * Returns an array with archive list data for blog and news.
 */
function ymca_get_archive_data($context) {
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'blog');
  $nids = $query->execute();
  if (empty($nids)) {
    return;
  }

  $context == 'news' ? $url_key = '/news/ymca_news_archive/' : '';
  $context == 'blog' ? $url_key = '/blog/archive/' : '';

  $nodes = entity_load_multiple('node', $nids);
  $years = array();
  foreach ($nodes as $node) {
    $year = date('Y', $node->getCreatedTime());
    $month = array(
      'title' => date('F', $node->getCreatedTime()),
      'number' => date('m', $node->getCreatedTime()),
      'url' => Drupal\Core\Url::fromUri('internal:' . $url_key . $year . '/' . date('m', $node->getCreatedTime())),
    );
    if (!in_array($month, $data[$year])) {
      $data[$year][] = $month;
    }
  }
  return $data;
}

/**
 * Prepares variables for input templates.
 *
 * Default template: input.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #attributes.
 */
function ymca_preprocess_input(&$variables) {
  $element = $variables['element'];
  $variables['children'] = $element['#children'];

  $classes = array(
    'form-control',
    'text',
  );
  if ($element['#type'] == 'submit') {
    $classes = array(
      'form_submit',
      'btn',
      'btn-lg',
      'btn-primary',
    );
  }
  elseif ($element['#type'] == 'email') {
    $classes = array(
      'form-control',
      'text',
      'email',
    );
  }

  $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $classes);
}

/**
 * Prepares variables for textarea templates.
 *
 * Default template: textarea.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #description, #rows, #cols,
 *     #placeholder, #required, #attributes, #resizable
 *
 */
function ymca_preprocess_textarea(&$variables) {
  $element = $variables['element'];
  Element::setAttributes($element, array('id', 'name', 'rows', 'cols', 'placeholder'));
  Element\RenderElement::setAttributes($element, array('form-textarea'));
  $variables['wrapper_attributes'] = new Attribute();
  $variables['attributes'] = new Attribute($element['#attributes']);
  $variables['value'] = $element['#value'];
  $variables['resizable'] = !empty($element['#resizable']) ? $element['#resizable'] : NULL;
  $variables['required'] = !empty($element['#required']) ? $element['#required'] : NULL;
  $variables['attributes']['class'][] = 'form-control';
  $variables['attributes']['class'][] = 'text';
}

/**
 * Prepares variables for select element templates.
 *
 * Default template: select.html.twig.
 *
 * It is possible to group options together; to do this, change the format of
 * $options to an associative array in which the keys are group labels, and the
 * values are associative arrays in the normal $options format.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #options, #description, #extra,
 *     #multiple, #required, #name, #attributes, #size.
 */
function ymca_preprocess_select(&$variables) {
  $element = $variables['element'];
  Element::setAttributes($element, array('id', 'name', 'size'));
  Element\RenderElement::setAttributes($element, array('form-select'));

  $variables['attributes'] = $element['#attributes'];
  $variables['options'] = form_select_options($element);

  $variables['attributes']['class'][] = 'form-control';
  $variables['attributes']['class'][] = 'text';
}

/**
 * Prepares variables for form templates.
 *
 * Default template: form.html.twig.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #action, #method, #attributes, #children
 */
function ymca_preprocess_form(&$variables) {
  $element = $variables['element'];
  if (isset($element['#action'])) {
    $element['#attributes']['action'] = UrlHelper::stripDangerousProtocols($element['#action']);
  }
  Element::setAttributes($element, array('method', 'id'));
  if (empty($element['#attributes']['accept-charset'])) {
    $element['#attributes']['accept-charset'] = "UTF-8";
  }
  $variables['attributes'] = $element['#attributes'];
  $variables['children'] = $element['#children'];

  if (in_array('contact_message_form', $element['#theme'])) {
    $variables['extra_text'] = t('* All fields required unless otherwise noted');
  }
}
